import pandas as pd
import msoffcrypto
import io
import re
import os
from tqdm.autonotebook import tqdm

# Register tqdm with pandas to show progress bars
tqdm.pandas(desc="Processing data")

# --- Configuration ---
file_path = "input.xlsx"  # Replace with your Excel file name
password = "your_password"   # Replace with your Excel password

# --- Load password-protected Excel ---
try:
    with open(file_path, "rb") as f:
        decrypted = io.BytesIO()
        office_file = msoffcrypto.OfficeFile(f)
        office_file.load_key(password=password)
        office_file.decrypt(decrypted)
        
    df = pd.read_excel(decrypted)
    print("Successfully read the Excel file!")

except FileNotFoundError:
    print(f"Error: The file '{file_path}' was not found.")
    exit()
except Exception as e:
    print(f"An error occurred: {e}")
    print("Please check your file path and password.")
    exit()

# --- Step 1: Filter rows first based on your specific criteria ---
# We will clean the columns before filtering to handle empty values and spaces
df["Status"] = df["Status"].fillna('').astype(str).str.strip().str.lower()
df["Latest Approver Name"] = df["Latest Approver Name"].fillna('').astype(str).str.strip()

df = df[(df["Status"] == "pending") & (df["Latest Approver Name"].str.contains("Aini Ayoub|Sybil Fitzgerald", case=False, na=False))]

print(f"\nAfter filtering, there are {len(df)} rows remaining.")
print(f"After filtering, there are {df['Position Code'].nunique()} unique Position IDs.")


# --- Step 2: Merge rows based on Position Code and extract IDs from merged comments ---
def merge_and_extract(group):
    merged = group.iloc[0].copy()
    
    # Merge comments into a single string for this Position Code
    merged_comments = ";".join(group["Comments"].dropna().astype(str).unique())
    merged["Comments"] = merged_comments
    
    # Extract IDs from the newly merged comment string
    # The CW Number regex is changed to find any 6-digit number
    cw_numbers = re.findall(r'\b\d{6}\b', merged_comments)
    bank_ids = re.findall(r'\b\d{7}\b', merged_comments)
    project_ids = re.findall(r'\b[12]\d{7}\b', merged_comments)
    
    # Save extracted IDs as semicolon-separated strings, with no duplicates
    merged["CW_Number"] = ";".join(pd.Series(cw_numbers).unique()) if cw_numbers else None
    merged["Bank_ID"] = ";".join(pd.Series(bank_ids).unique()) if bank_ids else None
    merged["Project_ID"] = ";".join(pd.Series(project_ids).unique()) if project_ids else None
    
    return merged

df_final = df.groupby("Position Code").progress_apply(merge_and_extract).reset_index(drop=True)


# --- Step 3: Keep only the required columns ---
selected_columns = [
    "col1", "col2", "col3", "col4", "col5", "col6", "col7", "col8", "col9", "col10", 
    "col11", "col12", "col13", "col14", "col15", "col16", "col17", "col18", "col19", "col20", 
    "Comments", "CW_Number", "Bank_ID", "Project_ID"
]
df_final = df_final[selected_columns]

# --- Save to new Excel, avoiding overwriting ---
base_filename = "cleaned_output.xlsx"
counter = 1
output_filename = base_filename

while os.path.exists(output_filename):
    name, ext = os.path.splitext(base_filename)
    output_filename = f"{name}_{counter}{ext}"
    counter += 1

df_final.to_excel(output_filename, index=False)
print(f"\nProcessing complete. The cleaned data has been saved to '{output_filename}'.")
