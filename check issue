import pandas as pd
import msoffcrypto
import io
import re
import os
from tqdm.autonotebook import tqdm

# Register tqdm with pandas to show progress bars
tqdm.pandas(desc="Processing data")

# --- Configuration for all files ---
file_path = "input.xlsx"  # Your initial raw data file
password = "your_password"   # Your Excel password
new_data_filename = "ProjectID_clarity.xlsx" # The file with ProjectID_clarity/Critical sheets
mapping_filename = "mapping.xlsx" # The new mapping file
final_output_filename = "final_report.xlsx" # The name for your final output file

# --- Load password-protected Excel ---
try:
    with open(file_path, "rb") as f:
        decrypted = io.BytesIO()
        office_file = msoffcrypto.OfficeFile(f)
        office_file.load_key(password=password)
        office_file.decrypt(decrypted)
        
    df = pd.read_excel(decrypted)
    df.columns = df.columns.str.strip()
    print("Successfully read and cleaned column names for the Excel file!")

except FileNotFoundError:
    print(f"Error: The file '{file_path}' was not found.")
    exit()
except Exception as e:
    print(f"An error occurred: {e}")
    print("Please check your file path and password.")
    exit()

# --- Step 1: Filter rows first based on your specific criteria ---
df["Status"] = df["Status"].fillna('').astype(str).str.strip().str.lower()
df["Latest Approver Name"] = df["Latest Approver Name"].fillna('').astype(str).str.strip()

df = df[(df["Status"] == "pending") & (df["Latest Approver Name"].str.contains("Aini Ayoub|Sybi", case=False, na=False))]

print(f"\nAfter filtering, there are {len(df)} rows remaining.")
print(f"After filtering, there are {df['Position Code'].nunique()} unique Position IDs.")


# --- Step 2: Merge rows based on Position Code and extract IDs from merged comments ---
def merge_and_extract(group):
    merged = group.iloc[0].copy()
    merged_comments = ";".join(group["Comments"].dropna().astype(str).unique())
    merged["Comments"] = merged_comments
    
    cw_numbers = re.findall(r'[Cc][Ww]\d{6}|\b\d{6}\b', merged_comments)
    bank_ids = re.findall(r'\b\d{7}\b', merged_comments)
    project_ids = re.findall(r'\b[12]\d{7}\b', merged_comments)
    
    merged["CW_Number"] = ";".join(pd.Series(cw_numbers).unique()) if cw_numbers else None
    merged["Bank_ID"] = ";".join(pd.Series(bank_ids).unique()) if bank_ids else None
    merged["Project_ID"] = ";".join(pd.Series(project_ids).unique()) if project_ids else None
    
    return merged

df_final = df.groupby("Position Code").progress_apply(merge_and_extract).reset_index(drop=True)


# --- Step 3: Load the new data files for all subsequent joins ---
try:
    df_new_sheets = pd.read_excel(new_data_filename, sheet_name=None)
    df_project_clarity = df_new_sheets['ProjectID_clarity']
    df_critical = df_new_sheets['Critical']
    df_project_clarity.columns = df_project_clarity.columns.str.strip()
    df_critical.columns = df_critical.columns.str.strip()
    print(f"\nSuccessfully loaded '{new_data_filename}' for joins.")
except Exception as e:
    print(f"Error loading '{new_data_filename}'. Skipping joins: {e}")
    df_project_clarity = pd.DataFrame()
    df_critical = pd.DataFrame()

# Load mapping.xlsx
try:
    df_mapping = pd.read_excel(mapping_filename, sheet_name='mapping')
    df_mapping.columns = df_mapping.columns.str.strip()
    print(f"Successfully loaded '{mapping_filename}' for cost and domain joins.")
except Exception as e:
    print(f"Error loading '{mapping_filename}'. Skipping cost/domain joins: {e}")
    df_mapping = pd.DataFrame()


# --- DIAGNOSTIC: Check for Duplicate Keys (Causing the ValueError) ---
print("\n--- DIAGNOSTIC CHECK FOR DUPLICATES ---")

# Check 1: Mapping File (Country and Business Function Lvl6 Name)
if not df_mapping.empty:
    # Normalize keys for accurate count
    df_mapping['Country_Check'] = df_mapping['Country'].astype(str).str.strip().str.lower()
    df_mapping['BF_L6_Check'] = df_mapping['Business Function Lvl6 Name'].astype(str).str.strip().str.lower()

    # Calculate duplicates for 'Country'
    total_rows = len(df_mapping)
    unique_rows_country = len(df_mapping.drop_duplicates(subset=['Country_Check']))
    print(f"'{mapping_filename}' - Country: {total_rows - unique_rows_country} duplicate keys found.")

    # Calculate duplicates for 'Business Function Lvl6 Name'
    unique_rows_bf = len(df_mapping.drop_duplicates(subset=['BF_L6_Check']))
    print(f"'{mapping_filename}' - Business Function Lvl6 Name: {total_rows - unique_rows_bf} duplicate keys found.")
    
    # Clean up temporary check columns
    df_mapping.drop(columns=['Country_Check', 'BF_L6_Check'], inplace=True)
else:
    print("Mapping file was not loaded, skipping checks.")


# Check 2: Critical Sheet (Job Family)
if not df_critical.empty:
    # Normalize key for accurate count
    df_critical['Job_Family_Check'] = df_critical['Job Family'].astype(str).str.strip().str.lower()

    # Calculate duplicates for 'Job Family'
    total_rows = len(df_critical)
    unique_rows_jf = len(df_critical.drop_duplicates(subset=['Job_Family_Check']))
    print(f"'{new_data_filename}' - Job Family: {total_rows - unique_rows_jf} duplicate keys found.")
    
    df_critical.drop(columns=['Job_Family_Check'], inplace=True)
else:
    print("Critical sheet was not loaded, skipping checks.")

print("------------------------------------------")
# --- END DIAGNOSTIC ---


# --- Step 4: Cost & Domain Joins from 'mapping' sheet (WITH DUPLICATE RESOLUTION) ---
if not df_mapping.empty:
    
    # NORMALIZE KEYS in Lookup Table
    df_mapping['Country'] = df_mapping['Country'].astype(str).str.strip().str.lower()
    df_mapping['Business Function Lvl6 Name'] = df_mapping['Business Function Lvl6 Name'].astype(str).str.strip().str.lower()
    
    # 4a: Cost Mapping (Country -> Cost)
    # FIX: Resolve duplicates in lookup table by keeping the first entry found
    cost_df_unique = df_mapping.drop_duplicates(subset=['Country'], keep='first')
    cost_map = cost_df_unique.set_index('Country')['high/low'].to_dict()
    
    df_final['Country_Key'] = df_final['Country'].astype(str).str.strip().str.lower()
    df_final['Cost'] = df_final['Country_Key'].apply(lambda x: cost_map.get(x, None))
    df_final.drop(columns=['Country_Key'], inplace=True)
    print("✅ Joined 'Cost' data based on 'Country'.")

    # 4b: Domain Mapping (Business Function L6 -> MT Domain, MT-1 Domain, Cost Cat)
    # FIX: Resolve duplicates in lookup table by keeping the first entry found
    domain_df_unique = df_mapping.drop_duplicates(subset=['Business Function Lvl6 Name'], keep='first')
    domain_map = domain_df_unique.set_index('Business Function Lvl6 Name')[['MT Domain', 'MT-1 Domain', 'Cost Cat']].to_dict('index')
    
    df_final['Business Function L6_Key'] = df_final['Business Function L6'].astype(str).str.strip().str.lower()
    
    def domain_lookup(bf_l6):
        return domain_map.get(bf_l6, {'MT Domain': None, 'MT-1 Domain': None, 'Cost Cat': None})

    domain_results = df_final['Business Function L6_Key'].apply(domain_lookup)
    df_final['MT Domain'] = [r['MT Domain'] for r in domain_results]
    df_final['MT-1 Domain'] = [r['MT-1 Domain'] for r in domain_results]
    df_final['Cost Category'] = [r['Cost Cat'] for r in domain_results]
    df_final.drop(columns=['Business Function L6_Key'], inplace=True)
    print("✅ Joined 'MT Domain', 'MT-1 Domain', and 'Cost Category' data.")

else:
    print("⚠️ Skipping cost and domain joins as the mapping file was not found.")
    df_final[['Cost', 'MT Domain', 'MT-1 Domain', 'Cost Category']] = None, None, None, None


# --- Step 5: Join from the 'Critical' sheet based on Job family (WITH DUPLICATE RESOLUTION) ---
if not df_critical.empty:
    # NORMALIZE KEY in Lookup Table
    df_critical['Job Family'] = df_critical['Job Family'].astype(str).str.strip().str.lower()
    # FIX: Resolve duplicates in lookup table by keeping the first entry found
    critical_df_unique = df_critical.drop_duplicates(subset=['Job Family'], keep='first')
    critical_jf_map = critical_df_unique.set_index('Job Family')['Critical JF'].to_dict()

    df_final['Job Family_Key'] = df_final['Job Family'].astype(str).str.strip().str.lower()
    df_final['Critical JF'] = df_final['Job Family_Key'].apply(lambda x: critical_jf_map.get(x, 'Others'))
    df_final.drop(columns=['Job Family_Key'], inplace=True)
    print("✅ Joined 'Critical JF' data.")
else:
    print("⚠️ Skipping 'Critical' sheet join.")
    df_final['Critical JF'] = 'Others'


# --- Step 6: Join from the 'ProjectID_clarity' sheet based on Project ID ---
if not df_project_clarity.empty:
    df_project_clarity['Project ID'] = df_project_clarity['Project ID'].astype(str).str.strip()
    project_clarity_map = df_project_clarity.set_index('Project ID')

    def lookup_and_join(project_ids_str):
        if pd.isna(project_ids_str) or not isinstance(project_ids_str, str):
            return None, None, None
        
        ids_list = [id.strip() for id in project_ids_str.split(';')]
        project_names, lifecycle_statuses, qpr_values = [], [], []
        
        for pid in ids_list:
            if pid in project_clarity_map.index:
                row = project_clarity_map.loc[pid]
                project_names.append(row['Project Name'])
                lifecycle_statuses.append(row['Lifecycle status'])
                qpr_values.append(row['Quarterly Performance Review(QPR)'])
        
        return (
            ";".join(pd.Series(project_names).dropna().unique()) if project_names else None,
            ";".join(pd.Series(lifecycle_statuses).dropna().unique()) if lifecycle_statuses else None,
            ";".join(pd.Series(qpr_values).dropna().unique()) if qpr_values else None
        )

    df_final[['Project Name', 'Lifecycle Status', 'Quarterly Performance Review(QPR)']] = df_final['Project_ID'].progress_apply(
        lambda x: pd.Series(lookup_and_join(x))
    )
    print("✅ Joined 'ProjectID_clarity' data.")
else:
    print("⚠️ Skipping 'ProjectID_clarity' sheet join.")
    df_final[['Project Name', 'Lifecycle Status', 'Quarterly Performance Review(QPR)']] = None, None, None


# --- Step 7: Final Column Selection and Ordering ---
selected_columns = [
    "Bank ID of requestor", 
    "Business Function",
    "MT Domain",
    "MT-1 Domain",
    "Cost Category",
    "Business Function L6",
    "Position Code",
    "Position Title",
    "Job Family",
    "Critical JF",
    "Country",
    "Location (Location Name)",
    "Cost",
    "Employment Type",
    "Global Grade",
    "Comments",
    "Reason for Hire",
    "People Leader Position",
    "CW_Number",
    "Bank_ID",
    "Project_ID",
    "Project Name", 
    "Lifecycle Status",
    "Quarterly Performance Review(QPR)"
]

df_final = df_final[selected_columns]

# --- Step 8: Save to new Excel, avoiding overwriting ---
base_filename = final_output_filename
counter = 1
output_filename = base_filename

while os.path.exists(output_filename):
    name, ext = os.path.splitext(base_filename)
    output_filename = f"{name}_{counter}{ext}"
    counter += 1

df_final.to_excel(output_filename, index=False)
print(f"\n🎉 All processing complete. The final report has been saved to '{output_filename}'.")
