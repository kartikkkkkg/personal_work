import pandas as pd
import msoffcrypto
import io
import re
import os
from tqdm.autonotebook import tqdm

# Register tqdm with pandas to show progress bars
tqdm.pandas(desc="Processing data")

# --- Configuration ---
file_path = "input.xlsx"  # Replace with your Excel file name
password = "your_password"   # Replace with your Excel password

# --- Load password-protected Excel ---
try:
    with open(file_path, "rb") as f:
        decrypted = io.BytesIO()
        office_file = msoffcrypto.OfficeFile(f)
        office_file.load_key(password=password)
        office_file.decrypt(decrypted)
        
    df = pd.read_excel(decrypted)
    print("Successfully read the Excel file!")

except FileNotFoundError:
    print(f"Error: The file '{file_path}' was not found.")
    exit()
except Exception as e:
    print(f"An error occurred: {e}")
    print("Please check your file path and password.")
    exit()

# --- Step 1: Extract IDs from Comments with progress bar ---
def extract_ids(comment):
    cw = re.findall(r'CW#\d{6}', str(comment))
    bank = re.findall(r'\b\d{7}\b', str(comment))
    project = re.findall(r'\b[12]\d{7}\b', str(comment))
    return pd.Series({
        "CW_Number": ";".join(cw) if cw else None,
        "Bank_ID": ";".join(bank) if bank else None,
        "Project_ID": ";".join(project) if project else None
    })

df[["CW_Number", "Bank_ID", "Project_ID"]] = df["Comments"].progress_apply(extract_ids)

# --- Step 2: Filter rows ---
# Using "Status" and "Latest Approver Name"
df = df[(df["Status"].str.lower() == "pending") & (df["Latest Approver Name"].str.contains("Sybi|Aini", case=False, na=False))]

# --- Step 3: Merge rows on Project_ID with progress bar ---
def merge_rows(group):
    # This will hold the final merged row
    merged = group.iloc[0].copy()
    
    # Merge the 'Comments' column by joining unique values with a semicolon
    merged["Comments"] = ";".join(group["Comments"].dropna().astype(str).unique())

    # Merge the new ID columns by joining unique values with a semicolon
    for col in ["CW_Number", "Bank_ID", "Project_ID"]:
        merged[col] = ";".join(group[col].dropna().astype(str).unique())
    
    return merged

df = df.groupby("Project_ID").progress_apply(merge_rows).reset_index(drop=True)

# --- Step 4: Keep only 20 required columns + new ones ---
# ðŸ‘‰ Replace with your actual column names
selected_columns = [
    "col1", "col2", "col3", "col4", "col5", "col6", "col7", "col8", "col9", "col10", 
    "col11", "col12", "col13", "col14", "col15", "col16", "col17", "col18", "col19", "col20", 
    "CW_Number", "Bank_ID", "Project_ID"
]
df_final = df[selected_columns]

# --- Save to new Excel, avoiding overwriting ---
base_filename = "cleaned_output.xlsx"
counter = 1
output_filename = base_filename

while os.path.exists(output_filename):
    name, ext = os.path.splitext(base_filename)
    output_filename = f"{name}_{counter}{ext}"
    counter += 1

df_final.to_excel(output_filename, index=False)
print(f"\nProcessing complete. The cleaned data has been saved to '{output_filename}'.")
